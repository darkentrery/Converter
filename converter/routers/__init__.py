import io
from aiogram import Bot, Dispatcher, types
from aiogram.filters import CommandStart
from aiogram.types import BufferedInputFile, ReplyKeyboardMarkup, KeyboardButton
from PIL import Image

from converter import entity
from converter.config import config
from converter.services.to_pdf import resize_to_a4

bot = Bot(token=config.TOKEN)
dp = Dispatcher()

user_images = {}
user_data: dict[int, entity.UserData] = {}


@dp.message(CommandStart())
async def start_handler(message: types.Message):
    chat_id = message.chat.id
    user_data[chat_id] = entity.UserData()
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text=entity.Button.LPG_TO_PDF.value)]
        ],
        resize_keyboard=True,
        one_time_keyboard=False
    )
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)


@dp.message(lambda message: message.text == entity.Button.LPG_TO_PDF.value)
async def start_conversion(message: types.Message):
    chat_id = message.chat.id
    user_data[chat_id] = entity.UserData(step=entity.Step.UPLOADING)
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text=entity.Button.READY.value), KeyboardButton(text=entity.Button.LPG_TO_PDF.value)]
        ],
        resize_keyboard=True
    )
    await message.answer("–û—Ç–ø—Ä–∞–≤—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤ PDF.", reply_markup=keyboard)


@dp.message(lambda message: message.photo or (message.document and message.document.mime_type.startswith("image/")))
async def collect_images(message: types.Message):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —Å–ø–∏—Å–æ–∫ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    chat_id = message.chat.id
    if user_data.get(chat_id, entity.UserData()).step != entity.Step.UPLOADING:
        return

    file_id = message.photo[-1].file_id if message.photo else message.document.file_id
    file = await bot.get_file(file_id)

    img_bytes = io.BytesIO()
    await bot.download_file(file.file_path, img_bytes)
    img_bytes.seek(0)

    user_data[chat_id].images.append(img_bytes)
    await message.answer("‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ! –û—Ç–ø—Ä–∞–≤—å –µ—â—ë –∏–ª–∏ –Ω–∞–∂–º–∏ '–ì–æ—Ç–æ–≤–æ'.")


@dp.message(lambda message: message.text and message.text == entity.Button.READY.value)
async def ask_orientation(message: types.Message):
    """–°–ø—Ä–∞—à–∏–≤–∞–µ—Ç –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—é –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º PDF."""
    user = user_data.get(message.chat.id, entity.UserData())
    if not user.images:
        await message.answer("‚ùå –¢—ã –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª –Ω–∏ –æ–¥–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è!")
        return

    user.step = entity.Step.ORIENTATION
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [
                KeyboardButton(text=entity.Button.LANDSCAPE.value),
                KeyboardButton(text=entity.Button.PORTRAIT.value),
                KeyboardButton(text=entity.Button.MIX.value),
            ]
        ],
        resize_keyboard=True,
        one_time_keyboard=True
    )
    await message.answer("–í—ã–±–µ—Ä–∏ –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—é —Å—Ç—Ä–∞–Ω–∏—Ü—ã:", reply_markup=keyboard)


@dp.message(lambda message: message.text and message.text in [
    entity.Orientation.LANDSCAPE.value, entity.Orientation.PORTRAIT.value, entity.Orientation.MIX.value
])
async def create_pdf(message: types.Message):
    """–°–æ–∑–¥–∞—ë—Ç PDF –∏–∑ –≤—Å–µ—Ö –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–∏."""
    chat_id = message.chat.id
    user = user_data.get(message.chat.id, entity.UserData())
    if user.step != entity.Step.ORIENTATION:
        return

    user.orientation = entity.Orientation(message.text)

    images = [resize_to_a4(Image.open(img).convert("RGB"), user.orientation) for img in user_data[chat_id].images]
    pdf_bytes = io.BytesIO()
    images[0].save(pdf_bytes, format="PDF", save_all=True, append_images=images[1:])
    pdf_bytes.seek(0)

    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è JPG to PDF")]
        ],
        resize_keyboard=True
    )

    await message.answer_document(
        BufferedInputFile(pdf_bytes.getvalue(), filename="converted.pdf"),
        caption=f"üìÑ –¢–≤–æ–π PDF –≥–æ—Ç–æ–≤! (–û—Ä–∏–µ–Ω—Ç–∞—Ü–∏—è: {user.orientation})",
        reply_markup=keyboard
    )

    user_data[chat_id] = entity.UserData()
